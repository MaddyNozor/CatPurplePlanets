class Fixed {

	public:
		Fixed( void );
		Fixed( Fixed const & num );
		Fixed( int const n);
		Fixed( float const x);
		~Fixed( void );
		Fixed &	operator=( Fixed const & num );
		int		getRawBits( void ) const;
		void	setRawBits( int const raw );
		float	toFloat( void ) const;
		int		toInt( void ) const;
		bool	operator>( Fixed const & num ) const;
		bool	operator>=( Fixed const & num ) const;
		bool	operator<( Fixed const & num ) const;
		bool	operator<=( Fixed const & num ) const;
		bool	operator==( Fixed const & num ) const;
		bool	operator!=( Fixed const & num ) const;
		Fixed	operator+( Fixed const & num ) const;
		Fixed	operator-( Fixed const & num ) const;
		Fixed	operator*( Fixed const & num ) const;
		Fixed	operator/( Fixed const & num ) const;
		Fixed &	operator++( void );
		Fixed	operator++( int );
		Fixed &	operator--( void );
		Fixed	operator--( int );
		static Fixed &	min( Fixed & fst, Fixed & snd );
		static Fixed const &	min( Fixed const & fst, Fixed const & snd );
		static Fixed &	max( Fixed & fst, Fixed & snd );
		static Fixed const &	max( Fixed const & fst, Fixed const & snd );

	private:
		int					_raw;
		static int const	_bits = 8;

};

std::ostream &	operator<<( std::ostream & o, Fixed const & num );

#endif




#include "Fixed.hpp"

Fixed::Fixed( void ) : _raw(0) {

//	std::cout << "Default constructor called" << std::endl;
	return ;
}

Fixed::Fixed( Fixed const & num ) {

//	std::cout << "Copy constructor called" << std::endl;
	*this = num;
	return ;
}

Fixed::Fixed( int const n ) {

//	std::cout << "Int constructor called" << std::endl;
	this->_raw = n << this->_bits;
	return ;
}

Fixed::Fixed( float const x ) {

//	std::cout << "Float constructor called" << std::endl;
	this->_raw = (int)roundf(x * (float)(1 << this->_bits));
	return ;
}

Fixed::~Fixed( void ) {

//	std::cout << "Destructor called" << std::endl;
	return ;
}

int	Fixed::getRawBits( void ) const {

//	std::cout << "getRawBits member function called" << std::endl;
	return this->_raw;
}

void	Fixed::setRawBits( int const raw ) {

//	std::cout << "setRawBits member function called" << std::endl;
	this->_raw = raw;
	return ;
}

Fixed &	Fixed::operator=( Fixed const & num ) {

//	std::cout << "Copy assignment operator called" << std::endl;
	this->_raw = num.getRawBits();
	return *this;
}

float	Fixed::toFloat( void ) const {

	return ((float)this->_raw / (float)(1 << this->_bits));
}

int	Fixed::toInt( void ) const {

	return (this->_raw >> this->_bits);
}

std::ostream & operator<<( std::ostream & o, Fixed const & num ) {

	return (o << num.toFloat());
}

bool	Fixed::operator>( Fixed const & num ) const {

	return (this->_raw > num.getRawBits());
}

bool	Fixed::operator>=( Fixed const & num ) const {

	return (this->_raw >= num.getRawBits());
}

bool	Fixed::operator<( Fixed const & num ) const {

	return (this->_raw < num.getRawBits());
}

bool	Fixed::operator<=( Fixed const & num ) const {

	return (this->_raw <= num.getRawBits());
}

bool	Fixed::operator==( Fixed const & num ) const {

	return (this->_raw == num.getRawBits());
}

bool	Fixed::operator!=( Fixed const & num ) const {

	return (this->_raw != num.getRawBits());
}

Fixed	Fixed::operator+( Fixed const & num ) const {

	Fixed	temp;
	temp.setRawBits(this->_raw + num.getRawBits());
	return temp;
}

Fixed	Fixed::operator-( Fixed const & num ) const {

	Fixed	temp;
	temp.setRawBits(this->_raw - num.getRawBits());
	return temp;
}

Fixed	Fixed::operator*( Fixed const & num ) const {

	return Fixed(this->toFloat() * num.toFloat());
}

Fixed	Fixed::operator/( Fixed const & num ) const {

	return Fixed(this->toFloat() / num.toFloat());
}

Fixed & Fixed::operator++( void ) {

	this->_raw += 1;
	return *this;
}

Fixed	Fixed::operator++( int ) {

	Fixed	temp(*this);
	this->_raw += 1;
	return temp;
}

Fixed &	Fixed::operator--( void ) {

	this->_raw -= 1;
	return *this;
}

Fixed	Fixed::operator--( int ) {

	Fixed	temp(*this);
	this->_raw -= 1;
	return temp;
}

Fixed &  Fixed::min( Fixed & fst, Fixed & snd ) {

	if (fst <= snd)
		return fst;
	else
		return snd;
}

Fixed const &  Fixed::min( Fixed const & fst, Fixed const & snd ) {

	if (fst <= snd)
		return fst;
	else
		return snd;
}

Fixed &  Fixed::max( Fixed & fst, Fixed & snd ) {

	if (fst >= snd)
		return fst;
	else
		return snd;
}

Fixed const &  Fixed::max( Fixed const & fst, Fixed const & snd ) {

	if (fst >= snd)
		return fst;
	else
		return snd;
}

